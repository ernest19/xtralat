# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class TblEvcTransactions(models.Model):
    ersreference = models.CharField(max_length=50, blank=True, null=True)
    originalersreference = models.CharField(max_length=50, blank=True, null=True)
    referredersreference = models.CharField(max_length=50, blank=True, null=True)
    isreversal = models.CharField(max_length=50, blank=True, null=True)
    clienttype = models.CharField(max_length=50, blank=True, null=True)
    transactiontype = models.CharField(max_length=50, blank=True, null=True)
    starttime = models.CharField(max_length=50, blank=True, null=True)
    endtime = models.CharField(max_length=50, blank=True, null=True)
    initiatorid = models.CharField(max_length=50, blank=True, null=True)
    initiatoridtype = models.CharField(max_length=50, blank=True, null=True)
    initiatortype = models.CharField(max_length=50, blank=True, null=True)
    transactionprofile = models.CharField(max_length=50, blank=True, null=True)
    resultcode = models.CharField(max_length=50, blank=True, null=True)
    resultstatus = models.CharField(max_length=50, blank=True, null=True)
    initiatormsisdn = models.CharField(max_length=50, blank=True, null=True)
    initiatorresellerid = models.CharField(max_length=50, blank=True, null=True)
    initiatorcontractid = models.CharField(max_length=50, blank=True, null=True)
    initiatorresellerpath = models.CharField(max_length=50, blank=True, null=True)
    initiatorgroup = models.CharField(max_length=50, blank=True, null=True)
    initiatoruserid = models.CharField(max_length=50, blank=True, null=True)
    resultmessage = models.CharField(max_length=50, blank=True, null=True)
    extrafields = models.CharField(max_length=50, blank=True, null=True)
    requestamountvalue = models.CharField(max_length=50, blank=True, null=True)
    requestamountcurrency = models.CharField(max_length=50, blank=True, null=True)
    receiveraccountid = models.CharField(max_length=50, blank=True, null=True)
    receiveraccounttype = models.CharField(max_length=50, blank=True, null=True)
    receiverid = models.CharField(max_length=50, blank=True, null=True)
    receiveridtype = models.CharField(max_length=50, blank=True, null=True)
    receivertype = models.CharField(max_length=50, blank=True, null=True)
    receivermsisdn = models.CharField(max_length=50, blank=True, null=True)
    receiverresellerid = models.CharField(max_length=50, blank=True, null=True)
    receiverresellerpath = models.CharField(max_length=50, blank=True, null=True)
    receiverresellertype = models.CharField(max_length=50, blank=True, null=True)
    receiverbalancevaluebefore = models.CharField(max_length=50, blank=True, null=True)
    receiverbalancevalueafter = models.CharField(max_length=50, blank=True, null=True)
    senderid = models.CharField(max_length=50, blank=True, null=True)
    senderidtype = models.CharField(max_length=50, blank=True, null=True)
    sendertype = models.CharField(max_length=50, blank=True, null=True)
    sendermsisdn = models.CharField(max_length=50, blank=True, null=True)
    senderresellerid = models.CharField(max_length=50, blank=True, null=True)
    senderresellerpath = models.CharField(max_length=50, blank=True, null=True)
    senderresellertype = models.CharField(max_length=50, blank=True, null=True)
    senderuserid = models.CharField(max_length=50, blank=True, null=True)
    senderaccountid = models.CharField(max_length=50, blank=True, null=True)
    senderaccounttype = models.CharField(max_length=50, blank=True, null=True)
    senderbalancevaluebefore = models.CharField(max_length=50, blank=True, null=True)
    senderbalancevalueafter = models.CharField(max_length=50, blank=True, null=True)
    receiveraccountstatus = models.CharField(max_length=50, blank=True, null=True)
    receiveraccountlinktypeid = models.CharField(max_length=50, blank=True, null=True)
    receiveraccountclassid = models.CharField(max_length=50, blank=True, null=True)
    receiveramountvalue = models.CharField(max_length=50, blank=True, null=True)
    topuptype = models.CharField(max_length=50, blank=True, null=True)
    resellercommissionamount = models.CharField(max_length=50, blank=True, null=True)
    receiverbonusamount = models.CharField(max_length=50, blank=True, null=True)
    receivercommissionamount = models.CharField(max_length=50, blank=True, null=True)
    bonustype = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tbl_evc_transactions'


class TblPos(models.Model):
    id = models.BigAutoField(unique=True)
    pos_id = models.BigIntegerField(primary_key=True)
    owner_first_name = models.CharField(max_length=255)
    owner_last_name = models.CharField(max_length=255)
    owner_telephone = models.CharField(max_length=20)
    business_name = models.CharField(max_length=255)
    category = models.CharField(max_length=255)
    status = models.CharField(max_length=255)
    longitude = models.DecimalField(max_digits=20, decimal_places=9)
    latitude = models.DecimalField(max_digits=20, decimal_places=9)
    territory_id = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'tbl_pos'


class TblPos(models.Model):
    id = models.BigIntegerField()
    pos_id = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'tbl_pos_'


class TblSessions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user_id = models.BigIntegerField()
    access_token = models.CharField(unique=True, max_length=100)
    access_token_expiry = models.DateTimeField()
    refresh_token = models.CharField(unique=True, max_length=100)
    refresh_token_expiry = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'tbl_sessions'


class TblTerritories(models.Model):
    id = models.BigAutoField(primary_key=True)
    territoryid = models.BigIntegerField()
    territoryname = models.CharField(max_length=255)
    regionid = models.BigIntegerField()
    regionname = models.CharField(max_length=255)
    county = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'tbl_territories'


class TblTraining(models.Model):
    id = models.BigAutoField(primary_key=True)
    user_id = models.BigIntegerField()
    pos_id = models.BigIntegerField()
    knowledge_of_service = models.FloatField()
    knowledge_of_selling_products = models.IntegerField()
    have_scratch_card = models.IntegerField()
    have_evd = models.IntegerField()
    data_package = models.IntegerField()
    plug = models.IntegerField()
    x5 = models.IntegerField()
    longitude = models.DecimalField(max_digits=20, decimal_places=9)
    latitude = models.DecimalField(max_digits=20, decimal_places=9)
    distance = models.DecimalField(max_digits=20, decimal_places=9)
    event_date = models.DateTimeField(blank=True, null=True)
    enter_agent_msisdn = models.CharField(max_length=30, blank=True, null=True)
    balance_momo = models.IntegerField(blank=True, null=True)
    momo_number = models.CharField(max_length=30, blank=True, null=True)
    momo_amount = models.CharField(max_length=100, blank=True, null=True)
    did_top_up_evd = models.IntegerField(blank=True, null=True)
    enter_evd_number = models.CharField(max_length=30, blank=True, null=True)
    enter_evd_amount = models.CharField(max_length=100, blank=True, null=True)
    geom = models.GeometryField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tbl_training'


class TblUsers(models.Model):
    id = models.BigAutoField(primary_key=True)
    full_name = models.CharField(max_length=255)
    telephone = models.CharField(max_length=255)
    username = models.CharField(unique=True, max_length=255)
    password = models.CharField(max_length=255)
    status = models.CharField(max_length=10, blank=True, null=True)
    is_admin = models.CharField(max_length=10, blank=True, null=True)
    territory_id = models.BigIntegerField(blank=True, null=True)
    created_by_user_id = models.BigIntegerField()
    date_created = models.DateTimeField(blank=True, null=True)
    date_updated = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tbl_users'


class TblWeekdays(models.Model):
    id = models.BigIntegerField(primary_key=True)
    custom_id = models.BigIntegerField()
    weekday_name = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'tbl_weekdays'


class Territories(models.Model):
    geom = models.GeometryField(blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=-1, blank=True, null=True)  # Field name made lowercase.
    description = models.CharField(max_length=-1, blank=True, null=True)
    timestamp = models.DateTimeField(blank=True, null=True)
    begin = models.DateTimeField(blank=True, null=True)
    end = models.DateTimeField(blank=True, null=True)
    altitudemode = models.CharField(db_column='altitudeMode', max_length=-1, blank=True, null=True)  # Field name made lowercase.
    tessellate = models.IntegerField(blank=True, null=True)
    extrude = models.IntegerField(blank=True, null=True)
    visibility = models.IntegerField(blank=True, null=True)
    draworder = models.IntegerField(db_column='drawOrder', blank=True, null=True)  # Field name made lowercase.
    icon = models.CharField(max_length=-1, blank=True, null=True)
    source = models.CharField(db_column='Source', max_length=-1, blank=True, null=True)  # Field name made lowercase.
    descriptio = models.CharField(max_length=-1, blank=True, null=True)
    altitudemo = models.CharField(db_column='altitudeMo', max_length=-1, blank=True, null=True)  # Field name made lowercase.
    county = models.CharField(db_column='COUNTY', max_length=-1, blank=True, null=True)  # Field name made lowercase.
    tsc_name = models.CharField(db_column='TSC_Name', max_length=-1, blank=True, null=True)  # Field name made lowercase.
    tsc_number = models.FloatField(db_column='TSC_Number', blank=True, null=True)  # Field name made lowercase.
    loc_rel = models.CharField(db_column='Loc_Rel', max_length=-1, blank=True, null=True)  # Field name made lowercase.
    pos_count = models.FloatField(db_column='POS_Count', blank=True, null=True)  # Field name made lowercase.
    circuit_co = models.FloatField(db_column='Circuit_Co', blank=True, null=True)  # Field name made lowercase.
    cell_count = models.FloatField(db_column='Cell_Count', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'territories'
